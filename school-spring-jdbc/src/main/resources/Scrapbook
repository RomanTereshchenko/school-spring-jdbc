select * from school.students_courses;
TRUNCATE TABLE school.groups CASCADE;
DROP SEQUENCE school.groups_group_id_seq CASCADE;
CREATE SEQUENCE school.groups_group_id_seq OWNED BY school.groups.group_id;
INSERT INTO school.groups(group_name) values ('abc');

-- Restart sequence
ALTER SEQUENCE school.groups_group_id_seq RESTART WITH 1;

-- Alter column to set DEFAULT nextval
ALTER TABLE school.groups ALTER COLUMN group_id SET DEFAULT nextval('school.groups_group_id_seq');

-- Create table with SERIAL column (equivalent with sequence details)
CREATE SEQUENCE table_name_id_seq;

CREATE TABLE table_name (
    id integer NOT NULL DEFAULT nextval('table_name_id_seq')
);

ALTER SEQUENCE table_name_id_seq
OWNED BY table_name.id;


--Get sequence name
SELECT 
	pg_get_serial_sequence('school.groups', 'group_id');
	
--Get sequence next value
SELECT 
	nextval('school.groups_group_id_seq');

--Get names of all current sequenses
SELECT
    relname sequence_name
FROM 
    pg_class 
WHERE 
    relkind = 'S';

--Drop Tables
DROP TABLE school.groups CASCADE;
DROP TABLE school.students CASCADE;
DROP TABLE school.courses CASCADE;
DROP TABLE school.students_courses CASCADE;


--Create Tables
CREATE SCHEMA IF NOT EXISTS school;

CREATE TABLE IF NOT EXISTS school.courses
(
	course_id SERIAL PRIMARY KEY,
    course_name VARCHAR(20) NOT NULL,
    course_description VARCHAR(200)
);

CREATE TABLE IF NOT EXISTS school.groups
(
    group_id SERIAL PRIMARY KEY,
    group_name VARCHAR(5) NOT NULL
);

CREATE TABLE IF NOT EXISTS school.students
(
    student_id SERIAL PRIMARY KEY,
    group_id INT,
    first_name VARCHAR(20) NOT NULL,
    last_name VARCHAR(20) NOT NULL,
	FOREIGN KEY (group_id)
		REFERENCES school.groups(group_id)
			ON DELETE SET NULL
);

CREATE TABLE IF NOT EXISTS school.students_courses
(
	student_id INT NOT NULL,
	course_id INT NOT NULL,
	FOREIGN KEY (student_id)
		REFERENCES school.students(student_id),
	FOREIGN KEY (course_id)
		REFERENCES school.courses(course_id),
	UNIQUE (student_id, course_id)
);